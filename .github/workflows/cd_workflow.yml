name: CD Workflow

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t tarea1:${{ github.sha }} .
          docker tag tarea1:${{ github.sha}} ${{ secrets.ECR_REPOSITORY_URI}}:latest

      # Step 3: Push Docker Image to ECR

      # Set up AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      # Push image to Amazon ECR
      - name: Push to ECR
        run: |
          docker push  ${{ secrets.ECR_REPOSITORY_URI }}:latest
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

#      # Step 4: Deploy to AWS ECS
#      - name: Deploy to AWS ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ecs-task-def.json
#          service: my-ecs-service
#          cluster: my-cluster
#          wait-for-service-stability: true
          
          
